name: qa-deploy

on:
  push:
    branches:
      - qa
  pull_request:
    branches:
      - qa

jobs:
  qa-build:
    runs-on: ubuntu-latest

    steps:
      # Etapa 1: Check out o código
      - name: Checkout code
        uses: actions/checkout@v4

      # Etapa 2: Configurar o Node.js
      - name: Setup NodeJS
        uses: actions/setup-node@v4
        with:
          node-version: 20.18.x

      # Etapa 3: Instalar o pnpm
      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      # Etapa 4: Instalar dependências e realizar o build
      - name: Install dependencies and build
        run: |
          pnpm install
          pnpm run build
          pnpm test
          echo ". ${{ secrets.VM_USER }}"

      # Etapa 5: Copiar arquivos para a VM via SCP
      - name: Upload Build to VM via SCP
        uses: appleboy/scp-action@v0.1.1
        with:
          host: ${{ secrets.VM_HOST }}
          username: ${{ secrets.VM_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          source: "./*"  # Copiar todos os arquivos e pastas
          target: "/home/${{ secrets.VM_USER }}/app"  # Destino na VM

      # Etapa 6: Conectar na VM e rodar o Docker Compose
      - name: Deploy application on VM
        uses: appleboy/ssh-action@v0.1.1
        with:
          host: ${{ secrets.VM_HOST }}
          username: ${{ secrets.VM_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          script: |
            # Instalar Docker e Docker Compose (caso não esteja instalado)
            sudo apt-get update -y
            sudo apt-get install -y docker.io docker-compose

            # Navegar até o diretório da aplicação
            cd /home/${{ secrets.VM_USER }}/app

            # Parar e remover containers antigos
            docker-compose down

            # Iniciar os containers via Docker Compose
            docker-compose up -d --build
