name: deploy

on:
  push:
    branches:
      - qa
  pull_request:
    branches:
      - qa

env:
  COMMIT_HASH: ${{ github.sha }}
  REPO_NAME: ${{ github.repository }}
  API_PORT: ${{ secrets.API_PORT }}
  API_URL: ${{ secrets.API_URL }}
  DATABASE_URL: ${{ secrets.DATABASE_URL }}
  NODE_ENV: ${{ secrets.NODE_ENV }}

jobs:
  build:
    runs-on: qa-fpx-server
    outputs:
      image: ${{ steps.build_image.outputs.image }}  # Definindo a saída
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image
        id: build_image  # Definindo um id para referenciar a saída
        run: |
          echo "Buildando a imagem..."
          REPO_REF=$(echo $REPO_NAME | cut -d'/' -f2)
          IMAGE=$REPO_REF:${COMMIT_HASH:0:7}
          echo "Realizando o build da imagem $IMAGE"
          docker build -t $IMAGE .
          echo "image=$IMAGE" >> $GITHUB_ENV  # Usando GITHUB_ENV para passar a variável entre jobs

  test:
    runs-on: qa-fpx-server
    needs: build
    steps:
      - name: Run tests
        run: |
          echo "Rodando os testes com Jest. Aguarde..."
          echo "Executando os testes na imagem ${{ env.image }}"  # Referenciando a variável de ambiente
          echo "Executando comando 'docker run --rm ${{ env.image }} pnpm test'"
          docker run --rm ${{ env.image }} pnpm test

  deploy:
    runs-on: qa-fpx-server
    needs: test
    steps:
      - name: Deploy application
        run: |
          echo "Efetuando deploy da aplicação..."
          echo "Imagem atual: ${{ env.image }}"  # Referenciando a variável de ambiente
          docker compose down --remove-orphans
          docker compose up -d
